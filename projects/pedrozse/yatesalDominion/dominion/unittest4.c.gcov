        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://Custom Assert Function
        -:    9:void assertTrue(int a, int b, char* testName)
        -:   10:{
        4:   11:	if(a == b)
        -:   12:	{
        4:   13:		printf("%s Test Successful\n", testName);
        4:   14:	}
        -:   15:	
        -:   16:	else
        -:   17:	{
    #####:   18:		printf("%s Test Failed\n", testName);
        -:   19:	}
        4:   20:}
        -:   21:
        -:   22:int main(int argc, char *argv[])
        -:   23:{
        2:   24:	int numPlayers = 2;
        2:   25:	int k[10] = {smithy, adventurer, council_room, feast, gardens, mine, remodel, village, salvager, great_hall};
        2:   26:	int seed = 10;
        -:   27:	struct gameState state;
        -:   28:	int i;
        -:   29:   
        -:   30:	//Print which test is being run
        2:   31:	printf("Unit Test - Shuffle\n");
        -:   32:	
        2:   33:	int initSuccess = initializeGame(numPlayers, k, seed, &state);
        2:   34:	if(initSuccess != 0)
        -:   35:	{
    #####:   36:	   printf("Game failed to initialize\n");
    #####:   37:	}
        -:   38:	
        -:   39:	//Set 2 Decks Equally 
        2:   40:	state.deckCount[0] = 10;
        2:   41:	state.deckCount[1] = 10;
        -:   42:	
       44:   43:	for(i = 0; i < 10; i++)
        -:   44:	{
       20:   45:		state.deck[0][i] = k[i];
       20:   46:		state.deck[1][i] = k[i];
       20:   47:	}
        -:   48:	
        2:   49:	shuffle(0, &state);
        -:   50:	
        -:   51:	//Test Change in Card Order
        2:   52:	int different = 0;
        -:   53:	
       44:   54:	for(i = 0; i < 10; i++)
        -:   55:	{
       20:   56:		if(state.deck[0][i] != state.deck[1][i])
        -:   57:		{
       18:   58:			different++;
       18:   59:		}	
       20:   60:	}
        -:   61:	
        2:   62:	if(different > 0)
        -:   63:	{
        2:   64:		different = 1;
        2:   65:	}
        -:   66:	
        2:   67:	assertTrue(1, different, "Card Order Changed -");
        -:   68:	
        -:   69:	//Test No Cards in Deck to Shuffle
        2:   70:	state.deckCount[0] = 0;
        2:   71:	assertTrue(-1, shuffle(0, &state), "No Cards to Shuffle -");
        -:   72:	
        2:   73:    return 0;
        -:   74:}
        -:   75:
        -:   76:
        -:   77:
        -:   78:
        -:   79:
        -:   80:
        -:   81:
        -:   82:
        -:   83:
        -:   84:
