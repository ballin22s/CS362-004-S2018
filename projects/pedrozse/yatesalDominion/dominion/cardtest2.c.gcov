        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://Custom Assert Function
        -:    9:void assertTrue(int a, int b, char* testName)
        -:   10:{
        6:   11:	if(a == b)
        -:   12:	{
        4:   13:		printf("%s Test Successful\n", testName);
        4:   14:	}
        -:   15:	
        -:   16:	else
        -:   17:	{
        2:   18:		printf("%s Test Failed\n", testName);
        -:   19:	}
        6:   20:}
        -:   21:
        -:   22:int main(int argc, char *argv[])
        -:   23:{
        2:   24:	int numPlayers = 2;
        2:   25:	int k[10] = {smithy, adventurer, council_room, feast, gardens, mine, remodel, village, salvager, great_hall};
        2:   26:	int seed = 10;
        -:   27:	struct gameState state;
        2:   28:	int choice1 = 0;
        2:   29:	int choice2 = 0;
        2:   30:	int choice3 = 0;
        2:   31:	int handpos = 0;
        2:   32:	int bonus = 0;
        -:   33:   
        -:   34:	//Print which test is being run
        2:   35:	printf("Card Test - Adventurer\n");
        -:   36:	
        2:   37:	int initSuccess = initializeGame(numPlayers, k, seed, &state);
        2:   38:	if(initSuccess != 0)
        -:   39:	{
    #####:   40:	   printf("Game failed to initialize\n");
    #####:   41:	}
        -:   42:    
        -:   43:	//State of Game Before Adventurer is Played
        2:   44:	int inHand = numHandCards(&state);
        2:   45:	int deckSize = state.deckCount[whoseTurn(&state)];
        2:   46:	int moneyToSpend = state.coins;
        -:   47:	
        -:   48:	//Play Adventurer
        2:   49:	cardEffect(adventurer, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   50:   
        -:   51:	//State of Game After Adventurer is Played
        2:   52:	updateCoins(whoseTurn(&state), &state, bonus);
        2:   53:	int newDeckSize = state.deckCount[whoseTurn(&state)];
        -:   54:	
        -:   55:	//Test Correct Hand Size - Should Have 2 Additional $ Cards
        2:   56:	assertTrue(inHand + 1, numHandCards(&state), "Correct Hand Size -");
        -:   57:   
        -:   58:	//May Not be a Valid Test, May Have to Shuffle Discard In, Increasing the Size
        -:   59:	//Test Correct Deck Size
        2:   60:	assertTrue(1, (deckSize - 2 >= newDeckSize), "Correct Deck Size -"); 
        -:   61:	
        -:   62:	//Test Correct Amount Money to Spend - Additional $ Should be Available 
        2:   63:	assertTrue(1, (moneyToSpend + 2 <= state.coins), "Correct Amount Money to Spend -");
        -:   64:   
        2:   65:   return 0;   
        -:   66:}
        -:   67:
        -:   68:
