        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://Custom Assert Function
        -:    9:void assertTrue(int a, int b, char* testName)
        -:   10:{
        4:   11:	if(a == b)
        -:   12:	{
        4:   13:		printf("%s Test Successful\n", testName);
        4:   14:	}
        -:   15:	
        -:   16:	else
        -:   17:	{
    #####:   18:		printf("%s Test Failed\n", testName);
        -:   19:	}
        4:   20:}
        -:   21:
        -:   22:int main(int argc, char *argv[])
        -:   23:{
        2:   24:	int numPlayers = 2;
        2:   25:	int k[10] = {smithy, adventurer, council_room, feast, gardens, mine, remodel, village, salvager, great_hall};
        2:   26:	int seed = 10;
        -:   27:	struct gameState state;
        -:   28:   
        -:   29:	//Print which test is being run
        2:   30:	printf("Unit Test - Whose Turn\n");
        -:   31:	
        2:   32:	int initSuccess = initializeGame(numPlayers, k, seed, &state);
        2:   33:	if(initSuccess != 0)
        -:   34:	{
    #####:   35:	   printf("Game failed to initialize\n");
    #####:   36:	}	
        -:   37:	
        -:   38:	//Test Initial Turn
        2:   39:	assertTrue(0, whoseTurn(&state), "Whose Turn Initial -");	
        -:   40:	
        -:   41:	//Test After Turn Change
        2:   42:	endTurn(&state);
        2:   43:	assertTrue(1, whoseTurn(&state), "Player Turn Change -");
        -:   44:	
        2:   45:    return 0;
        -:   46:}
