dominion.c:
File 'dominion.c'
Lines executed:43.61% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
169583689:    9:    if (*(int*)a > *(int*)b)
   645647:   10:	return 1;
168938042:   11:    if (*(int*)a < *(int*)b)
 60685688:   12:	return -1;
108252354:   13:    return 0;
169583689:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:	struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
  6008021:   44:    SelectStream(1);
  6008021:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
 12016042:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:	return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
  6008021:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
132176462:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
1321764620:   59:	for (j = 0; j < 10; j++)
        -:   60:	{
1141523990:   61:	    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:		return -1;
        -:   64:	    }
600802100:   65:	}
 60080210:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
  6008021:   73:    if (numPlayers == 2)
        -:   74:    {
  6002615:   75:	state->supplyCount[curse] = 10;
  6002615:   76:    }
     5406:   77:    else if (numPlayers == 3)
        -:   78:    {
     2704:   79:	state->supplyCount[curse] = 20;
     2704:   80:    }
        -:   81:    else
        -:   82:    {
     2702:   83:	state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
  6008021:   87:    if (numPlayers == 2)
        -:   88:    {
  6002615:   89:	state->supplyCount[estate] = 8;
  6002615:   90:	state->supplyCount[duchy] = 8;
  6002615:   91:	state->supplyCount[province] = 8;
  6002615:   92:    }
        -:   93:    else
        -:   94:    {
     5406:   95:	state->supplyCount[estate] = 12;
     5406:   96:	state->supplyCount[duchy] = 12;
     5406:   97:	state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
  6008021:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
  6008021:  102:    state->supplyCount[silver] = 40;
  6008021:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
252336882:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
1982718894:  108:	for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
931275239:  110:	    if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:		//check if card is a 'Victory' Kingdom card
120148435:  113:		if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     7990:  115:		    if (numPlayers == 2){ 
     2581:  116:			state->supplyCount[i] = 8; 
     2581:  117:		    }
     5409:  118:		    else{ state->supplyCount[i] = 12; }
     7990:  119:		}
        -:  120:		else
        -:  121:		{
 60068222:  122:		    state->supplyCount[i] = 10;
        -:  123:		}
 60076212:  124:		break;
        -:  125:	    }
        -:  126:	    else    //card is not in the set choosen for the game
        -:  127:	    {
871199027:  128:		state->supplyCount[i] = -1;
        -:  129:	    }
871199027:  130:	}
        -:  131:
120160420:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
 36064342:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
 12024150:  140:	state->deckCount[i] = 0;
 96193200:  141:	for (j = 0; j < 3; j++)
        -:  142:	{
 36072450:  143:	    state->deck[i][j] = estate;
 36072450:  144:	    state->deckCount[i]++;
 36072450:  145:	}
192386400:  146:	for (j = 3; j < 10; j++)
        -:  147:	{
 84169050:  148:	    state->deck[i][j] = copper;
 84169050:  149:	    state->deckCount[i]++;		
 84169050:  150:	}
 12024150:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
 36064342:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
 12024150:  156:	if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	    return -1;
        -:  159:	}
 12024150:  160:    }
        -:  161:
        -:  162:    //draw player hands
 36064342:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:	//initialize hand size to zero
 12024150:  166:	state->handCount[i] = 0;
 12024150:  167:	state->discardCount[i] = 0;
        -:  168:	//draw 5 cards
        -:  169:	// for (j = 0; j < 5; j++)
        -:  170:	//	{
        -:  171:	//	  drawCard(i, state);
        -:  172:	//	}
 12024150:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
336449176:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
162216567:  178:	state->embargoTokens[i] = 0;
162216567:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
  6008021:  182:    state->outpostPlayed = 0;
  6008021:  183:    state->phase = 0;
  6008021:  184:    state->numActions = 1;
  6008021:  185:    state->numBuys = 1;
  6008021:  186:    state->playedCardCount = 0;
  6008021:  187:    state->whoseTurn = 0;
  6008021:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
 72096252:  192:    for (it = 0; it < 5; it++){
 30040105:  193:	drawCard(state->whoseTurn, state);
 30040105:  194:    }
        -:  195:
  6008021:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
  6008021:  198:    return 0;
  6008021:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
 12025771:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
 12025771:  209:    if (state->deckCount[player] < 1)
      869:  210:	return -1;
 12024902:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
264900706:  214:    while (state->deckCount[player] > 0) {
120425451:  215:	card = floor(Random() * state->deckCount[player]);
120425451:  216:	newDeck[newDeckPos] = state->deck[player][card];
120425451:  217:	newDeckPos++;
871604234:  218:	for (i = card; i < state->deckCount[player]-1; i++) {
315376666:  219:	    state->deck[player][i] = state->deck[player][i+1];
315376666:  220:	}
120425451:  221:	state->deckCount[player]--;
        -:  222:    }
264900706:  223:    for (i = 0; i < newDeckPos; i++) {
120425451:  224:	state->deck[player][i] = newDeck[i];
120425451:  225:	state->deckCount[player]++;
120425451:  226:    }
        -:  227:
 12024902:  228:    return 0;
 12025771:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:	return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:	return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:	return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:	return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:	printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:	if (DEBUG)
        -:  284:	    printf("You do not have any buys left\n");
    #####:  285:	return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:	if (DEBUG)
        -:  288:	    printf("There are not any of that type of card left\n");
    #####:  289:	return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:	if (DEBUG) 
        -:  292:	    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:	return -1;
        -:  294:    } else {
    #####:  295:	state->phase=1;
        -:  296:	//state->supplyCount[supplyPos]--;
    #####:  297:	gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:	state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:	state->numBuys--;
        -:  301:	if (DEBUG)
        -:  302:	    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
   554847:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        4:  316:    int currentPlayer = whoseTurn(state);
        4:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
   115200:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:	if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:	if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:	if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
   661205:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    22094:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
 11228180:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
  5591996:  357:	state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  5591996:  358:	state->hand[currentPlayer][i] = -1;//Set card to -1
  5591996:  359:    }
    22094:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    22094:  363:    if (currentPlayer < (state->numPlayers - 1)){ 
    15094:  364:	state->whoseTurn = currentPlayer + 1;//Still safe to increment
    15094:  365:    }
        -:  366:    else{
     7000:  367:	state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    22094:  370:    state->outpostPlayed = 0;
    22094:  371:    state->phase = 0;
    22094:  372:    state->numActions = 1;
    22094:  373:    state->coins = 0;
    22094:  374:    state->numBuys = 1;
    22094:  375:    state->playedCardCount = 0;
    22094:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
   265128:  380:    for (k = 0; k < 5; k++){
   110470:  381:	drawCard(state->whoseTurn, state);//Draw a card
   110470:  382:    }
        -:  383:
        -:  384:    //Update money
    22094:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    22094:  387:    return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
        8:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:	return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
        6:  401:    j = 0;
      312:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
      150:  404:	if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	    j++;
        6:  407:	}
      150:  408:    }
        6:  409:    if ( j >= 3)
        -:  410:    {
        2:  411:	return 1;
        -:  412:    }
        -:  413:
        4:  414:    return 0;
        8:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:	if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:	if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:	if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:	if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:	if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:	if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:	if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:	if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:	if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:	if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:	if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:	if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:	if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:	if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:	if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:	if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:	if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:	if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;	
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:	//set unused player scores to -9999
    #####:  467:	if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	    players[i] = -9999;
    #####:  470:	}
        -:  471:	else
        -:  472:	{
    #####:  473:	    players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:	if (players[i] > players[j])
        -:  482:	{
    #####:  483:	    j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:	if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	    players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:	if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	    j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:	if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	    players[i] = 1;
    #####:  515:	}
        -:  516:	else
        -:  517:	{
    #####:  518:	    players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
 30580234:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:	//Step 1 Shuffle the discard pile back into a deck
        -:  531:	int i;
        -:  532:	//Move discard to deck
   370902:  533:	for (i = 0; i < state->discardCount[player];i++){
   183931:  534:	    state->deck[player][i] = state->discard[player][i];
   183931:  535:	    state->discard[player][i] = -1;
   183931:  536:	}
        -:  537:
     1520:  538:	state->deckCount[player] = state->discardCount[player];
     1520:  539:	state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:	//Shufffle the deck
     1520:  542:	shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:	if (DEBUG){//Debug statements
        -:  545:	    printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:	}
        -:  547:
     1520:  548:	state->discardCount[player] = 0;
        -:  549:
        -:  550:	//Step 2 Draw Card
     1520:  551:	count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:	if (DEBUG){//Debug statements
        -:  554:	    printf("Current hand count: %d\n", count);
        -:  555:	}
        -:  556:
     1520:  557:	deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1520:  559:	if (deckCounter == 0)
      770:  560:	    return -1;
        -:  561:
      750:  562:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      750:  563:	state->deckCount[player]--;
      750:  564:	state->handCount[player]++;//Increment hand count
      750:  565:    }
        -:  566:
        -:  567:    else{
 30578714:  568:	int count = state->handCount[player];//Get current hand count for player
        -:  569:	int deckCounter;
        -:  570:	if (DEBUG){//Debug statements
        -:  571:	    printf("Current hand count: %d\n", count);
        -:  572:	}
        -:  573:
 30578714:  574:	deckCounter = state->deckCount[player];//Create holder for the deck count
 30578714:  575:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 30578714:  576:	state->deckCount[player]--;
 30578714:  577:	state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
 30579464:  580:    return 0;
 30580234:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
        4:  585:    switch( cardNumber ) 
        -:  586:    {
        -:  587:	case curse:
        4:  588:	    return 0;
        -:  589:	case estate:
    #####:  590:	    return 2;
        -:  591:	case duchy:
    #####:  592:	    return 5;
        -:  593:	case province:
    #####:  594:	    return 8;
        -:  595:	case copper:
    #####:  596:	    return 0;
        -:  597:	case silver:
    #####:  598:	    return 3;
        -:  599:	case gold:
    #####:  600:	    return 6;
        -:  601:	case adventurer:
    #####:  602:	    return 6;
        -:  603:	case council_room:
    #####:  604:	    return 5;
        -:  605:	case feast:
    #####:  606:	    return 4;
        -:  607:	case gardens:
    #####:  608:	    return 4;
        -:  609:	case mine:
    #####:  610:	    return 5;
        -:  611:	case remodel:
    #####:  612:	    return 4;
        -:  613:	case smithy:
    #####:  614:	    return 4;
        -:  615:	case village:
    #####:  616:	    return 3;
        -:  617:	case baron:
    #####:  618:	    return 4;
        -:  619:	case great_hall:
    #####:  620:	    return 3;
        -:  621:	case minion:
    #####:  622:	    return 5;
        -:  623:	case steward:
    #####:  624:	    return 3;
        -:  625:	case tribute:
    #####:  626:	    return 5;
        -:  627:	case ambassador:
    #####:  628:	    return 3;
        -:  629:	case cutpurse:
    #####:  630:	    return 4;
        -:  631:	case embargo: 
    #####:  632:	    return 2;
        -:  633:	case outpost:
    #####:  634:	    return 5;
        -:  635:	case salvager:
    #####:  636:	    return 4;
        -:  637:	case sea_hag:
    #####:  638:	    return 4;
        -:  639:	case treasure_map:
    #####:  640:	    return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        4:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:    int i;
        -:  649:    int j;
        -:  650:    int k;
        -:  651:	int x;
        -:  652:    int index;
    62107:  653:    int currentPlayer = whoseTurn(state);
    62107:  654:    int nextPlayer = currentPlayer + 1;
        -:  655:
    62107:  656:    int tributeRevealedCards[2] = {-1, -1};
        -:  657:    int temphand[MAX_HAND];// moved above the if statement
    62107:  658:	int drawntreasure=0;
        -:  659:	int cardDrawn;
    62107:  660:    if (nextPlayer > (state->numPlayers - 1)){
    26924:  661:	nextPlayer = 0;
    26924:  662:    }
        -:  663:
        -:  664:
        -:  665:    //uses switch to select card and perform actions
   184302:  666:    switch( card ) 
        -:  667:    {
        -:  668:	case adventurer:
        -:  669:	  /*
        -:  670:	  while(drawntreasure<2){
        -:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
        -:  674:	drawCard(currentPlayer, state);
        -:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  677:	  drawntreasure++;
        -:  678:	else{
        -:  679:	  temphand[z]=cardDrawn;
        -:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  681:	  z++;
        -:  682:	}
        -:  683:      }
        -:  684:      while(z-1>=0){
        -:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  686:	z=z-1;
        -:  687:      }
        -:  688:	  return 0;
        -:  689:	  */
        -:  690:
     1004:  691:	playAdventurer(state, currentPlayer, temphand);
     1004:  692:	return 0;
        -:  693:
        -:  694:	case council_room:
        -:  695:	/*
        -:  696:      //+4 Cards
        -:  697:      for (i = 0; i < 4; i++)
        -:  698:	{
        -:  699:	  drawCard(currentPlayer, state);
        -:  700:	}
        -:  701:			
        -:  702:      //+1 Buy
        -:  703:      state->numBuys++;
        -:  704:			
        -:  705:      //Each other player draws a card
        -:  706:      for (i = 0; i < state->numPlayers; i++)
        -:  707:	{
        -:  708:	  if ( i != currentPlayer )
        -:  709:	    {
        -:  710:	      drawCard(i, state);
        -:  711:	    }
        -:  712:	}
        -:  713:			
        -:  714:      //put played card in played card pile
        -:  715:      discardCard(handPos, currentPlayer, state, 0);
        -:  716:			
        -:  717:      return 0;
        -:  718:	*/
    #####:  719:	playCouncilRoom(state, currentPlayer, handPos);
        -:  720:
        -:  721:    case feast:
        -:  722:      //gain card with cost up to 5
        -:  723:      //Backup hand
    #####:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  725:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  726:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  727:      }
        -:  728:      //Backup hand
        -:  729:
        -:  730:      //Update Coins for Buy
    #####:  731:      updateCoins(currentPlayer, state, 5);
    #####:  732:      x = 1;//Condition to loop on
    #####:  733:      while( x == 1) {//Buy one card
    #####:  734:	if (supplyCount(choice1, state) <= 0){
        -:  735:	  if (DEBUG)
        -:  736:	    printf("None of that card left, sorry!\n");
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  740:	  }
    #####:  741:	}
    #####:  742:	else if (state->coins < getCost(choice1)){
    #####:  743:	  printf("That card is too expensive!\n");
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  747:	  }
    #####:  748:	}
        -:  749:	else{
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
    #####:  755:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  756:	  x = 0;//No more buying cards
        -:  757:
        -:  758:	  if (DEBUG){
        -:  759:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  760:	  }
        -:  761:
        -:  762:	}
        -:  763:      }     
        -:  764:
        -:  765:      //Reset Hand
    #####:  766:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  767:	state->hand[currentPlayer][i] = temphand[i];
    #####:  768:	temphand[i] = -1;
    #####:  769:      }
        -:  770:      //Reset Hand
        -:  771:      			
    #####:  772:      return 0;
        -:  773:
        -:  774:	case gardens:
    #####:  775:	    return -1;
        -:  776:
        -:  777:	case mine:
    #####:  778:	    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  779:
    #####:  780:	    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  781:	    {
    #####:  782:		return -1;
        -:  783:	    }
        -:  784:
    #####:  785:	    if (choice2 > treasure_map || choice2 < curse)
        -:  786:	    {
    #####:  787:		return -1;
        -:  788:	    }
        -:  789:
    #####:  790:	    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  791:	    {
    #####:  792:		return -1;
        -:  793:	    }
        -:  794:
    #####:  795:	    gainCard(choice2, state, 2, currentPlayer);
        -:  796:
        -:  797:	    //discard card from hand
    #####:  798:	    discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:	    //discard trashed card
    #####:  801:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	    {
    #####:  803:		if (state->hand[currentPlayer][i] == j)
        -:  804:		{
    #####:  805:		    discardCard(i, currentPlayer, state, 0);			
    #####:  806:		    break;
        -:  807:		}
    #####:  808:	    }
    #####:  809:	    return 0;
        -:  810:
        -:  811:	case remodel:
    #####:  812:	    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:	    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  815:	    {
    #####:  816:		return -1;
        -:  817:	    }
        -:  818:
    #####:  819:	    gainCard(choice2, state, 0, currentPlayer);
        -:  820:
        -:  821:	    //discard card from hand
    #####:  822:	    discardCard(handPos, currentPlayer, state, 0);
        -:  823:
        -:  824:	    //discard trashed card
    #####:  825:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  826:	    {
    #####:  827:		if (state->hand[currentPlayer][i] == j)
        -:  828:		{
    #####:  829:		    discardCard(i, currentPlayer, state, 0);			
    #####:  830:		    break;
        -:  831:		}
    #####:  832:	    }
        -:  833:
        -:  834:
    #####:  835:	    return 0;
        -:  836:
        -:  837:	case smithy:
        -:  838:	/*
        -:  839:      //+3 Cards
        -:  840:      for (i = 0; i < 3; i++)
        -:  841:	{
        -:  842:	  drawCard(currentPlayer, state);
        -:  843:	}
        -:  844:			
        -:  845:      //discard card from hand
        -:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:      return 0;
        -:  848:	*/
    61096:  849:	playSmithy(state, currentPlayer, handPos);
        -:  850:
        -:  851:	case village:
        -:  852:	/*
        -:  853:      //+1 Card
        -:  854:      drawCard(currentPlayer, state);
        -:  855:			
        -:  856:      //+2 Actions
        -:  857:      state->numActions = state->numActions + 2;
        -:  858:			
        -:  859:      //discard played card from hand
        -:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:      return 0;
        -:  862:	*/
    61099:  863:	playVillage(state, currentPlayer, handPos);
        -:  864:
        -:  865:	case baron:
    61099:  866:	    state->numBuys++;//Increase buys by 1!
    61099:  867:	    if (choice1 > 0){//Boolean true or going to discard an estate
    10045:  868:		int p = 0;//Iterator for hand!
    10045:  869:		int card_not_discarded = 1;//Flag for discard set!
   465214:  870:		while(card_not_discarded){
   222562:  871:		    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     9253:  872:			state->coins += 4;//Add 4 coins to the amount of coins
     9253:  873:			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     9253:  874:			state->discardCount[currentPlayer]++;
  4682732:  875:			for (;p < state->handCount[currentPlayer]; p++){
  2332113:  876:			    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
  2332113:  877:			}
     9253:  878:			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     9253:  879:			state->handCount[currentPlayer]--;
     9253:  880:			card_not_discarded = 0;//Exit the loop
     9253:  881:		    }
   213309:  882:		    else if (p > state->handCount[currentPlayer]){
        -:  883:			if(DEBUG) {
        -:  884:			    printf("No estate cards in your hand, invalid choice\n");
        -:  885:			    printf("Must gain an estate if there are any\n");
        -:  886:			}
      792:  887:			if (supplyCount(estate, state) > 0){
      792:  888:			    gainCard(estate, state, 0, currentPlayer);
      792:  889:			    state->supplyCount[estate]--;//Decrement estates
      792:  890:			    if (supplyCount(estate, state) == 0){
    #####:  891:				isGameOver(state);
    #####:  892:			    }
      792:  893:			}
      792:  894:			card_not_discarded = 0;//Exit the loop
      792:  895:		    }
        -:  896:
        -:  897:		    else{
   212517:  898:			p++;//Next card
        -:  899:		    }
        -:  900:		}
    10045:  901:	    }
        -:  902:
        -:  903:	    else{
    51054:  904:		if (supplyCount(estate, state) > 0){
    30882:  905:		    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    30882:  906:		    state->supplyCount[estate]--;//Decrement Estates
    30882:  907:		    if (supplyCount(estate, state) == 0){
    #####:  908:			isGameOver(state);
    #####:  909:		    }
    30882:  910:		}
        -:  911:	    }
        -:  912:
        -:  913:
    61099:  914:	    return 0;
        -:  915:
        -:  916:	case great_hall:
        -:  917:	/*
        -:  918:      //+1 Card
        -:  919:      drawCard(currentPlayer, state);
        -:  920:			
        -:  921:      //+1 Actions
        -:  922:      state->numActions++;
        -:  923:			
        -:  924:      //discard card from hand
        -:  925:      discardCard(handPos, currentPlayer, state, 0);
        -:  926:      return 0;
        -:  927:	*/
    #####:  928:	 playGreatHall(state, currentPlayer, handPos);
        -:  929:
        -:  930:	case minion:
        -:  931:	    //+1 action
    #####:  932:	    state->numActions++;
        -:  933:
        -:  934:	    //discard card from hand
    #####:  935:	    discardCard(handPos, currentPlayer, state, 0);
        -:  936:
    #####:  937:	    if (choice1)		//+2 coins
        -:  938:	    {
    #####:  939:		state->coins = state->coins + 2;
    #####:  940:	    }
        -:  941:
    #####:  942:	    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  943:	    {
        -:  944:		//discard hand
    #####:  945:		while(numHandCards(state) > 0)
        -:  946:		{
    #####:  947:		    discardCard(handPos, currentPlayer, state, 0);
        -:  948:		}
        -:  949:
        -:  950:		//draw 4
    #####:  951:		for (i = 0; i < 4; i++)
        -:  952:		{
    #####:  953:		    drawCard(currentPlayer, state);
    #####:  954:		}
        -:  955:
        -:  956:		//other players discard hand and redraw if hand size > 4
    #####:  957:		for (i = 0; i < state->numPlayers; i++)
        -:  958:		{
    #####:  959:		    if (i != currentPlayer)
        -:  960:		    {
    #####:  961:			if ( state->handCount[i] > 4 )
        -:  962:			{
        -:  963:			    //discard hand
    #####:  964:			    while( state->handCount[i] > 0 )
        -:  965:			    {
    #####:  966:				discardCard(handPos, i, state, 0);
        -:  967:			    }
        -:  968:
        -:  969:			    //draw 4
    #####:  970:			    for (j = 0; j < 4; j++)
        -:  971:			    {
    #####:  972:				drawCard(i, state);
    #####:  973:			    }
    #####:  974:			}
    #####:  975:		    }
    #####:  976:		}
        -:  977:
    #####:  978:	    }
    #####:  979:	    return 0;
        -:  980:
        -:  981:	case steward:
    #####:  982:	    if (choice1 == 1)
        -:  983:	    {
        -:  984:		//+2 cards
    #####:  985:		drawCard(currentPlayer, state);
    #####:  986:		drawCard(currentPlayer, state);
    #####:  987:	    }
    #####:  988:	    else if (choice1 == 2)
        -:  989:	    {
        -:  990:		//+2 coins
    #####:  991:		state->coins = state->coins + 2;
    #####:  992:	    }
        -:  993:	    else
        -:  994:	    {
        -:  995:		//trash 2 cards in hand
    #####:  996:		discardCard(choice2, currentPlayer, state, 1);
    #####:  997:		discardCard(choice3, currentPlayer, state, 1);
        -:  998:	    }
        -:  999:
        -: 1000:	    //discard card from hand
    #####: 1001:	    discardCard(handPos, currentPlayer, state, 0);
    #####: 1002:	    return 0;
        -: 1003:
        -: 1004:	case tribute:
    #####: 1005:	    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1006:		if (state->deckCount[nextPlayer] > 0){
    #####: 1007:		    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1008:		    state->deckCount[nextPlayer]--;
    #####: 1009:		}
    #####: 1010:		else if (state->discardCount[nextPlayer] > 0){
    #####: 1011:		    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1012:		    state->discardCount[nextPlayer]--;
    #####: 1013:		}
        -: 1014:		else{
        -: 1015:		    //No Card to Reveal
        -: 1016:		    if (DEBUG){
        -: 1017:			printf("No cards to reveal\n");
        -: 1018:		    }
        -: 1019:		}
    #####: 1020:	    }
        -: 1021:
        -: 1022:	    else{
    #####: 1023:		if (state->deckCount[nextPlayer] == 0){
    #####: 1024:		    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1025:			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1026:			state->deckCount[nextPlayer]++;
    #####: 1027:			state->discard[nextPlayer][i] = -1;
    #####: 1028:			state->discardCount[nextPlayer]--;
    #####: 1029:		    }
        -: 1030:
    #####: 1031:		    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1032:		} 
    #####: 1033:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:		state->deckCount[nextPlayer]--;
    #####: 1036:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:		state->deckCount[nextPlayer]--;
        -: 1039:	    }    
        -: 1040:
    #####: 1041:	    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1042:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1043:		state->playedCardCount++;
    #####: 1044:		tributeRevealedCards[1] = -1;
    #####: 1045:	    }
        -: 1046:
    #####: 1047:	    for (i = 0; i <= 2; i ++){
    #####: 1048:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1049:		    state->coins += 2;
    #####: 1050:		}
        -: 1051:
    #####: 1052:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1053:		    drawCard(currentPlayer, state);
    #####: 1054:		    drawCard(currentPlayer, state);
    #####: 1055:		}
        -: 1056:		else{//Action Card
    #####: 1057:		    state->numActions = state->numActions + 2;
        -: 1058:		}
    #####: 1059:	    }
        -: 1060:
    #####: 1061:	    return 0;
        -: 1062:
        -: 1063:	case ambassador:
    #####: 1064:	    j = 0;		//used to check if player has enough cards to discard
        -: 1065:
    #####: 1066:	    if (choice2 > 2 || choice2 < 0)
        -: 1067:	    {
    #####: 1068:		return -1;				
        -: 1069:	    }
        -: 1070:
    #####: 1071:	    if (choice1 == handPos)
        -: 1072:	    {
    #####: 1073:		return -1;
        -: 1074:	    }
        -: 1075:
    #####: 1076:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1077:	    {
    #####: 1078:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1079:		{
    #####: 1080:		    j++;
    #####: 1081:		}
    #####: 1082:	    }
    #####: 1083:	    if (j < choice2)
        -: 1084:	    {
    #####: 1085:		return -1;				
        -: 1086:	    }
        -: 1087:
        -: 1088:	    if (DEBUG) 
        -: 1089:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1090:
        -: 1091:	    //increase supply count for choosen card by amount being discarded
    #####: 1092:	    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1093:
        -: 1094:	    //each other player gains a copy of revealed card
    #####: 1095:	    for (i = 0; i < state->numPlayers; i++)
        -: 1096:	    {
    #####: 1097:		if (i != currentPlayer)
        -: 1098:		{
    #####: 1099:		    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1100:		}
    #####: 1101:	    }
        -: 1102:
        -: 1103:	    //discard played card from hand
    #####: 1104:	    discardCard(handPos, currentPlayer, state, 0);			
        -: 1105:
        -: 1106:	    //trash copies of cards returned to supply
    #####: 1107:	    for (j = 0; j < choice2; j++)
        -: 1108:	    {
    #####: 1109:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1110:		{
    #####: 1111:		    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1112:		    {
    #####: 1113:			discardCard(i, currentPlayer, state, 1);
    #####: 1114:			break;
        -: 1115:		    }
    #####: 1116:		}
    #####: 1117:	    }			
        -: 1118:
    #####: 1119:	    return 0;
        -: 1120:
        -: 1121:	case cutpurse:
        -: 1122:
    #####: 1123:	    updateCoins(currentPlayer, state, 2);
    #####: 1124:	    for (i = 0; i < state->numPlayers; i++)
        -: 1125:	    {
    #####: 1126:		if (i != currentPlayer)
        -: 1127:		{
    #####: 1128:		    for (j = 0; j < state->handCount[i]; j++)
        -: 1129:		    {
    #####: 1130:			if (state->hand[i][j] == copper)
        -: 1131:			{
    #####: 1132:			    discardCard(j, i, state, 0);
    #####: 1133:			    break;
        -: 1134:			}
    #####: 1135:			if (j == state->handCount[i])
        -: 1136:			{
    #####: 1137:			    for (k = 0; k < state->handCount[i]; k++)
        -: 1138:			    {
        -: 1139:				if (DEBUG)
        -: 1140:				    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1141:			    }	
    #####: 1142:			    break;
        -: 1143:			}		
    #####: 1144:		    }
        -: 1145:
    #####: 1146:		}
        -: 1147:
    #####: 1148:	    }				
        -: 1149:
        -: 1150:	    //discard played card from hand
    #####: 1151:	    discardCard(handPos, currentPlayer, state, 0);			
        -: 1152:
    #####: 1153:	    return 0;
        -: 1154:
        -: 1155:
        -: 1156:	case embargo: 
        -: 1157:	    //+2 Coins
    #####: 1158:	    state->coins = state->coins + 2;
        -: 1159:
        -: 1160:	    //see if selected pile is in play
    #####: 1161:	    if ( state->supplyCount[choice1] == -1 )
        -: 1162:	    {
    #####: 1163:		return -1;
        -: 1164:	    }
        -: 1165:
        -: 1166:	    //add embargo token to selected supply pile
    #####: 1167:	    state->embargoTokens[choice1]++;
        -: 1168:
        -: 1169:	    //trash card
    #####: 1170:	    discardCard(handPos, currentPlayer, state, 1);		
    #####: 1171:	    return 0;
        -: 1172:
        -: 1173:	case outpost:
        -: 1174:	    //set outpost flag
    #####: 1175:	    state->outpostPlayed++;
        -: 1176:
        -: 1177:	    //discard card
    #####: 1178:	    discardCard(handPos, currentPlayer, state, 0);
    #####: 1179:	    return 0;
        -: 1180:
        -: 1181:	case salvager:
        -: 1182:	    //+1 buy
        4: 1183:	    state->numBuys++;
        -: 1184:
        4: 1185:	    if (choice1)
        -: 1186:	    {
        -: 1187:		//gain coins equal to trashed card
        2: 1188:		state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1189:		//trash card
        2: 1190:		discardCard(choice1, currentPlayer, state, 1);	
        2: 1191:	    }
        -: 1192:
        -: 1193:	    //discard card
        4: 1194:	    discardCard(handPos, currentPlayer, state, 0);
        4: 1195:	    return 0;
        -: 1196:
        -: 1197:	case sea_hag:
    #####: 1198:	    for (i = 0; i < state->numPlayers; i++){
    #####: 1199:		if (i != currentPlayer){
    #####: 1200:		    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1201:		    state->discardCount[i]++;
    #####: 1202:		    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1203:		}
    #####: 1204:	    }
    #####: 1205:	    return 0;
        -: 1206:
        -: 1207:	case treasure_map:
        -: 1208:	    //search hand for another treasure_map
    #####: 1209:	    index = -1;
    #####: 1210:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1211:	    {
    #####: 1212:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1213:		{
    #####: 1214:		    index = i;
    #####: 1215:		    break;
        -: 1216:		}
    #####: 1217:	    }
    #####: 1218:	    if (index > -1)
        -: 1219:	    {
        -: 1220:		//trash both treasure cards
    #####: 1221:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1222:		discardCard(index, currentPlayer, state, 1);
        -: 1223:
        -: 1224:		//gain 4 Gold cards
    #####: 1225:		for (i = 0; i < 4; i++)
        -: 1226:		{
    #####: 1227:		    gainCard(gold, state, 1, currentPlayer);
    #####: 1228:		}
        -: 1229:
        -: 1230:		//return success
    #####: 1231:		return 1;
        -: 1232:	    }
        -: 1233:
        -: 1234:	    //no second treasure_map found in hand
    #####: 1235:	    return -1;
        -: 1236:    }
        -: 1237:
    #####: 1238:    return -1;
    62107: 1239:}
        -: 1240:
        -: 1241:/*Assignment 2: Refactored Functions*/
        -: 1242:int playAdventurer(struct gameState *state, int currentPlayer, int *temphand){
        -: 1243:	int cardDrawn;
     1004: 1244:	int z = 0;
     1004: 1245:	int drawntreasure = 0;
    10360: 1246:	while(drawntreasure<=2){
     4176: 1247:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       97: 1248:		shuffle(currentPlayer, state);
       97: 1249:	}
     4176: 1250:	drawCard(currentPlayer, state);
     4176: 1251:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6504: 1252:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     3012: 1253:	  drawntreasure++;
        -: 1254:	else{
     1164: 1255:	  temphand[z]=cardDrawn;
     1164: 1256:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1164: 1257:	  ++z;
        -: 1258:	}
        -: 1259:      }
     4336: 1260:      while(z-1>=0){
     1164: 1261:	state->discard[currentPlayer][state->discardCount[currentPlayer]]=temphand[z-1]; // discard all cards in play that have been drawn
     1164: 1262:	z=z-1;
        -: 1263:      }
     1004: 1264:	return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos, int i){
        -: 1268:	//+4 Cards
    #####: 1269:    for (i = 0; i < 4; i++)
        -: 1270:	{
    #####: 1271:	  drawCard(currentPlayer, state);
    #####: 1272:	}
        -: 1273:			
        -: 1274:    //+1 Buy
    #####: 1275:    state->numBuys++;
        -: 1276:	//(BUG: increase numBuys twice)
    #####: 1277:	state->numBuys++;
        -: 1278:			
        -: 1279:    //Each other player draws a card
    #####: 1280:    for (i = 0; i < state->numPlayers; i++)
        -: 1281:	{
    #####: 1282:	  if ( i != currentPlayer )
        -: 1283:	    {
    #####: 1284:	      drawCard(i, state);
    #####: 1285:	    }
    #####: 1286:	}
        -: 1287:			
        -: 1288:    //put played card in played card pile
    #####: 1289:    discardCard(handPos, currentPlayer, state, 0);		
        -: 1290:    
    #####: 1291:	return 0;
        -: 1292:}
        -: 1293:
        -: 1294:int playGreatHall(struct gameState *state, int currentPlayer, int handPos){
        -: 1295:	//+1 Card
    #####: 1296:    drawCard(currentPlayer, state);
        -: 1297:	//(BUG: Draws an extra card)
    #####: 1298:	drawCard(currentPlayer, state); 
        -: 1299:			
        -: 1300:    //+1 Actions
    #####: 1301:    state->numActions++;
        -: 1302:			
        -: 1303:    //discard card from hand
    #####: 1304:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1305:    return 0;
        -: 1306:}
        -: 1307:
        -: 1308:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1309:	//+3 Cards (BUG: DRAWS 4 CARDS)
    61096: 1310:	int i = 0;
   610960: 1311:    for (i = 0; i <= 3; i++)
        -: 1312:	{
   244384: 1313:	  drawCard(currentPlayer, state);
   244384: 1314:	}
        -: 1315:			
        -: 1316:    //discard card from hand
    61096: 1317:    discardCard(handPos, currentPlayer, state, 0);
    61096: 1318:    return 0;
        -: 1319:}
        -: 1320:
        -: 1321:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -: 1322:    //+1 Card
    61099: 1323:    drawCard(currentPlayer, state);
        -: 1324:			
        -: 1325:    //+2 Actions (BUG: increase actions by 1 only)
    61099: 1326:    state->numActions = state->numActions + 1;
        -: 1327:			
        -: 1328:    //discard played card from hand
    61099: 1329:    discardCard(handPos, currentPlayer, state, 0);
    61099: 1330:    return 0;
        -: 1331:	
        -: 1332:}
        -: 1333:
        -: 1334:/*Assignment 2: End*/
        -: 1335:
        -: 1336:
        -: 1337:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1338:{
        -: 1339:    //if card is not trashed, added to Played pile 
   162201: 1340:    if (trashFlag < 1)
        -: 1341:    {
        -: 1342:	//add card to played pile
   162199: 1343:	state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   162199: 1344:	state->playedCardCount++;
   162199: 1345:    }
        -: 1346:
        -: 1347:    //set played card to -1
   162201: 1348:    state->hand[currentPlayer][handPos] = -1;
        -: 1349:
        -: 1350:    //remove card from player's hand
   162201: 1351:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1352:    {
        -: 1353:	//reduce number of cards in hand
        2: 1354:	state->handCount[currentPlayer]--;
        2: 1355:    }
   162199: 1356:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1357:    {
        -: 1358:	//reduce number of cards in hand
        2: 1359:	state->handCount[currentPlayer]--;
        2: 1360:    }
        -: 1361:    else 	
        -: 1362:    {
        -: 1363:	//replace discarded card with last card in hand
   162197: 1364:	state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1365:	//set last card to -1
   162197: 1366:	state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1367:	//reduce number of cards in hand
   162197: 1368:	state->handCount[currentPlayer]--;
        -: 1369:    }
        -: 1370:
   162201: 1371:    return 0;
        -: 1372:}
        -: 1373:
        -: 1374:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1375:{
        -: 1376:    //Note: supplyPos is enum of choosen card
        -: 1377:
        -: 1378:    //check if supply pile is empty (0) or card is not used in game (-1)
    31680: 1379:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1380:    {
    #####: 1381:	return -1;
        -: 1382:    }
        -: 1383:
        -: 1384:    //added card for [whoseTurn] current player:
        -: 1385:    // toFlag = 0 : add to discard
        -: 1386:    // toFlag = 1 : add to deck
        -: 1387:    // toFlag = 2 : add to hand
        -: 1388:
    31680: 1389:    if (toFlag == 1)
        -: 1390:    {
        2: 1391:	state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1392:	state->deckCount[player]++;
        2: 1393:    }
    31678: 1394:    else if (toFlag == 2)
        -: 1395:    {
        2: 1396:	state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1397:	state->handCount[player]++;
        2: 1398:    }
        -: 1399:    else
        -: 1400:    {
    31676: 1401:	state->discard[player][ state->discardCount[player] ] = supplyPos;
    31676: 1402:	state->discardCount[player]++;
        -: 1403:    }
        -: 1404:
        -: 1405:    //decrease number in supply pile
    31680: 1406:    state->supplyCount[supplyPos]--;
        -: 1407:
    31680: 1408:    return 0;
    31680: 1409:}
        -: 1410:
        -: 1411:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1412:{
        -: 1413:    int i;
        -: 1414:
        -: 1415:    //reset coin count
  6031122: 1416:    state->coins = 0;
        -: 1417:
        -: 1418:    //add coins for each Treasure card in player's hand
 72874984: 1419:    for (i = 0; i < state->handCount[player]; i++)
        -: 1420:    {
 30406370: 1421:	if (state->hand[player][i] == copper)
        -: 1422:	{
 24088277: 1423:	    state->coins += 1;
 24088277: 1424:	}
  6318093: 1425:	else if (state->hand[player][i] == silver)
        -: 1426:	{
    #####: 1427:	    state->coins += 2;
    #####: 1428:	}
  6318093: 1429:	else if (state->hand[player][i] == gold)
        -: 1430:	{
    #####: 1431:	    state->coins += 3;
    #####: 1432:	}	
 30406370: 1433:    }	
        -: 1434:
        -: 1435:    //add bonus
  6031122: 1436:    state->coins += bonus;
        -: 1437:
  6031122: 1438:    return 0;
        -: 1439:}
        -: 1440:
        -: 1441://end of dominion.c
