        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://Custom Assert Function
        -:    9:void assertTrue(int a, int b, char* testName)
        -:   10:{
        8:   11:	if(a == b)
        -:   12:	{
        8:   13:		printf("%s Test Successful\n", testName);
        8:   14:	}
        -:   15:	
        -:   16:	else
        -:   17:	{
    #####:   18:		printf("%s Test Failed\n", testName);
        -:   19:	}
        8:   20:}
        -:   21:
        -:   22://Random Supply Card
        -:   23:int randomCard()
        -:   24:{
       12:   25:	int card = (rand() % 26);
        -:   26:	
        6:   27:	return card;
        -:   28:}
        -:   29:
        -:   30:int main(int argc, char *argv[])
        -:   31:{
        2:   32:	int numPlayers = 2;
        2:   33:	int k[10] = {smithy, adventurer, council_room, feast, gardens, mine, remodel, village, salvager, great_hall};
        2:   34:	int seed = 10;
        -:   35:	struct gameState state;
        2:   36:	int random1 = randomCard();
        2:   37:	int random2 = 0;
        2:   38:	int random3 = 0;
        -:   39:	
        2:   40:	do{
        2:   41:		random2 = randomCard();
        4:   42:	}while(random1 == random2);
        -:   43:		
        2:   44:	do{
        2:   45:		random3 = randomCard();
        8:   46:	}while(random1 == random3 || random2 == random3);
        -:   47:   
        -:   48:	//Print which test is being run
        2:   49:	printf("Unit Test - Is Game Over\n");
        -:   50:	
        2:   51:	int initSuccess = initializeGame(numPlayers, k, seed, &state);
        2:   52:	if(initSuccess != 0)
        -:   53:	{
    #####:   54:	   printf("Game failed to initialize\n");
    #####:   55:	}	
        -:   56:	
        -:   57:	//Province Cards Tests
        -:   58:
        -:   59:	//Still Have Province Cards, No Supply Piles Empty
        2:   60:	assertTrue(0, isGameOver(&state), "Game Continues, Have Province Cards -");	
        -:   61:	
        -:   62:	//Out of Province Cards, No Supply Piles Empty
        -:   63:	//Empty Povince Pile 
        2:   64:	state.supplyCount[province] = 0;
        -:   65:	
        2:   66:	assertTrue(1, isGameOver(&state), "Game is Over, No Province Cards -");
        -:   67:
        -:   68:	//Supply Piles Tests
        -:   69:	//Still Have Province Cards, No Supply Piles Empty
        2:   70:	state.supplyCount[province] = 5;
        -:   71:	
        2:   72:	assertTrue(0, isGameOver(&state), "Game Continues, Have Supply Cards -");	
        -:   73:	
        -:   74:	//Still Have Province Cards, 3 Supply Piles Empty
        2:   75:	state.supplyCount[random1] = 0;
        2:   76:	state.supplyCount[random2] = 0;
        2:   77:	state.supplyCount[random3] = 0;
        -:   78:	
        2:   79:	assertTrue(1, isGameOver(&state), "Game is Over, 3 Supplies Out -");
        -:   80:	
        2:   81:    return 0;
        -:   82:}
